<script type="text/javascript">
    // sanitation prototype (TODO: We'd rather use the  npm install --save sanitize-html  browserified in the future! It is more secure!)
    String.prototype.sanitize=function (white,black) {
       if (!white) white='b|i|p|br';//allowed tags
       if (!black) black='script|object|embed';//complete remove tags
       var e=new RegExp("(<("+black+")[^>]*>.*</\\2>|(?!<[/]?("+white+")(\\s[^<]*>|[/]>|>))<[^<>]*>|(?!<[^<>\\s]+)\\s[^</>]+(?=[/>]))", "gi");
       return this.replace(e,'');
    }
    // get general translation strings
    content={};
    function htmlDecode(input) {
      var doc = new DOMParser().parseFromString(input, "text/html");
      return doc.documentElement.textContent;
    }
    function _tr(string, action) {
			$.post("/client/translate",
			{ q: string },
			function(string, status){ content[action] = htmlDecode(string); });
		}
    //_tr('Wired connection','wired');
    _tr('Disconnected','disconnected');
    _tr('connecting','connecting');
    // DEPRECATED: content.wired = 'Wired connection';

    $(document).ready(function() {      
      // general repeating interval interrupt
      pauseMainInterval = '';
      runningIntervals = {};
      runningIntQueue = [];
		
      setInterval(function() {
        if(pauseMainInterval != '/admin/wan') {
          // wan status
          nakdquery('{"jsonrpc": "2.0", "method": "connectivity", "id": 1}','#wan-connection', function(data) {
              if(data.result.local==true) {
                nakdquery('{"jsonrpc": "2.0", "method": "wlan_current", "params": "WLAN", "id": 1}','#wan-connection', function(data) {
                  $(data.element).css('color','black');
                  return data.result.ssid;
                });
              } else {
                nakdquery('{"jsonrpc": "2.0", "method": "wlan_connecting", "params": "WLAN", "id": 1}','#wan-connection', function(data) {
                  $(data.element).css('color','red');
                  return content.disconnected;
                });
              }
          });
        }
      }, 5000);
		
      setInterval(function() {
        updateRoutingButton();
      }, 5000);
		
      function nakdquery(json, element, successfunction, cnt) {
        console.log('Requesting RPC data from nakd'+(element?' for "'+element+'"':'')+'.');
        if(typeof cnt=='undefined') { cnt=1; } else { cnt++; }
        if(cnt<6) {
          $.ajax({
            type:'POST',
            url: '/nak-rpc',
            data: json,
            dataType: 'json',
            success: function(data, status){
              if(status=='success') {
                if(typeof successfunction=='function') {
                  data.element = element;
                  var result = successfunction(data);
                } else {
                  var result = data;
                }
                if(element) {
                  $(element).text(result);
                }
                // DEBUG: $(element).html(JSON.stringify(data));
              }
            },
            failure: function(json, element, successfunction) {
              setTimeout( nakdquery(json, element, successfunction) ,3000);
            }
          });
        }
      }

      function ajaxrefresh(url, element, successfunction) {
        // fix for limited memory: define a static, symbolic url, and use a queue for the requests
        var doubleEntry = 0;
        for (var i = 0; i < runningIntQueue.length; i++) {
          if (typeof runningIntQueue[i] != 'undefined') if (runningIntQueue[i].u == url) doubleEntry ++;
        }
        if(doubleEntry<3) runningIntQueue.push({'u':url,'e':element,'f':successfunction});
        url = 'singlerequest';
        // check to see if we are already running/waiting for an interval
        if(typeof runningIntervals[url] == 'undefined') {
          runningIntervals[url] = 0;
        }
        // if not, perform the AJAX function
        if(runningIntervals[url] <= 0) {
          runningIntervals[url] = 12;
          var req = runningIntQueue.shift();
          console.log('Requesting AJAX refresh now for "'+req.u+'".');
          if(pauseMainInterval != req.u) {
            $.ajax({
              type: "GET",
              url: req.u,
              success: function(data) {
                runningIntervals[url] = 0;
                if(typeof req.f!='undefined') {
                  var result = successfunction(req.f);
                } else {
                  var result = data;
                }
                if(element) {
                  $(element).text(result);
                }
              }
            });
          } else {
            console.log('Refresh interval paused for "'+req.u+'".');
          }
        } else {
          console.log('AJAX request busy. '+runningIntervals[url]+' ticks until forcing new call. Queue size is '+runningIntQueue.length+'.');
          runningIntervals[url]--;
        }
      }

      function spinner(element,padding) {
        $(element).html('<div class=\'spinner\''+(typeof padding!='undefined'?' style=\'padding-top: '+padding+'px;\'':'')+'><div class=\'spinner-loader\'></div></div>');
      }
            
      //
      //	higher level AJAX GUI functions
      //

      function updateWifi() {
        spinner('#wifi-list',45);         
        nakdquery('{"jsonrpc":"2.0", "id":1, "method":"wlan_scan"}', false);
        nakdquery('{"jsonrpc":"2.0", "id":1, "method":"wlan_list"}', '#wifi-list', function(data) {
            // hide password field by default
          $('#login-pass').hide();
          $('#login-field-icon').hide();
          // construct list of wlan stations
          var html = '<label class="radio"><table style="width: 100%;"><tbody>';
          html += '<tr><td><input type="radio" name="ssid" class="wifi-list-radiobtn" encryption="Wired" checked="true" id="optionsRadios0" value="'+content.wired+'" data-toggle="radio"><span class="fui-loop"></span> '+content.wired+'</td><td style="text-align: right;"></td></tr>';
          var i = 0;
          data.result.forEach( function(entry){
            i++;
            entry.strength = Math.round(entry.quality/entry.quality_max*1000)/10;
            html += '<tr><td><input type="radio" name="ssid" class="wifi-list-radiobtn" encryption="'+entry.encryption.sanitize()+'" id="optionsRadios'+i+'" value="'+entry.ssid.sanitize()+'" data-toggle="radio"><span class="fui-'+(entry.encryption!='none'?'lock':'eye')+'"></span> '+entry.ssid.sanitize()+'</td>';
            html += '<td style="text-align: right;"><div class="meter'+(entry.strength<50?(entry.strength<25?' red':' orange'):'')+'"><span style="width: '+entry.strength+'%"></span></div>';
            html += '</td></tr>';
          });
          html += '</tbody></table></label> <div style="height: 1.5em;"></div>';
          $(data.element).html(html); // is sanitized above!
          $(data.element).trigger("create");

          $(".wifi-list-radiobtn").click( function() {
            var encryption = $('#'+this.id).attr('encryption');
            $('#encryptiontype').val(encryption);
            if(encryption=='none' || encryption=='Wired') {
              $('#login-pass').fadeOut();
              $('#login-field-icon').fadeOut();
            } else {
              $('#login-field-icon').fadeIn();
              $('#login-pass').fadeIn();
            }
          });
        });
        
      }
      updateWifi();
              
      function updateRoutingButton() {
        // routing toggle switch state
        if(pauseMainInterval != 'routing_status') {
          nakdquery('{"jsonrpc":"2.0", "id":1, "method":"stage_current"}',false, function(data) {
            var routing = false;
            if(typeof data.result != 'undefined') {
              if(typeof data.result.name != 'undefined') {
                if(data.result.name == 'online') {
                  routing = true;                    
                }
              }
            }
            if(routing) {
              $('.bootstrap-switch-id-nroutingswitch').removeClass('bootstrap-switch-on').addClass('bootstrap-switch-off');
            } else {
              $('.bootstrap-switch-id-nroutingswitch').removeClass('bootstrap-switch-off').addClass('bootstrap-switch-on');
            }
          });
        }
        /* DEPRECATED: 
          nakdquery('{"jsonrpc": "2.0", "method": "stage_status", "id": 1}','#wan-connection', function(data) {
            if(typeof data.result.name != 'undefined') {
              if(typeof data.result.name == 'online') {
              }
            }
          });

        nakdquery('{"jsonrpc": "2.0", "method": "stage_status", "id": 1}','#wan-connection', function(data) {
          if(typeof data.result.name != undefined) {
            if(typeof data.result.name == 'online') {
              routing = true;
            }
          } else {
          }
        });        
          */
         /* DEPRECATED:
        ajaxrefresh('/admin/routing_status',false, function(state) {
          if(state) {
            $('.bootstrap-switch-id-nroutingswitch').removeClass('bootstrap-switch-on').addClass('bootstrap-switch-off');
          } else {
            $('.bootstrap-switch-id-nroutingswitch').removeClass('bootstrap-switch-off').addClass('bootstrap-switch-on');
          }
        });
        */
      }
      updateRoutingButton();
      
      function updateTiles() {
        // clear all intervals first
        if(typeof intervaltor!='undefined') { clearInterval(intervaltor); }
        if(typeof intervalvpn!='undefined') { clearInterval(intervalvpn); }
        // update TOR tile display
        $.ajax({
          type: "GET",
          url: "/admin/display_tor",
          success: function(data) {
            $('#module-tor').html(data);
            updateTorStatus();
            intervaltor = setInterval(function() {
              updateTorStatus();
            }, 2000);
            attacheventtor();
          },
          failure: function() {
            // or set buttons back to default state
            $('#module-tor .tile a').addClass('btn-primary').removeClass('btn-disabled');
          }
        });
        // update VPN tile display
        $.ajax({
          type: "GET",
          url: "/admin/display_vpn",
          success: function(data) {
            $('#module-vpn').html(data);
            updateVpnStatus();
            intervalvpn = setInterval(function() {
              updateVpnStatus();
            }, 2000);
            attacheventvpn();
          },
          failure: function() {
            // or set buttons back to default state
            $('#module-vpn .tile a').addClass('btn-primary').removeClass('btn-disabled');
          }
        });
      }

      <?php if ( ($this->_params['cur_stage'] == 'tor'
                  && $this->_params['tor_status'] != '100') ||
                 ($this->_params['cur_stage'] == 'vpn'
                  && $this->_params['vpn_status'] != '100') ): ?>
          updateTiles();
      <?php endif; ?>

      function updateTorStatus() {
        nakdquery('{"jsonrpc": "2.0", "method": "tor", "params": "GETINFO status/bootstrap-phase", "id": '+Math.floor(Math.random()*1000)+'}','#torprogressbar', function(data) {
          if(typeof data.error == 'undefined') {
            var element = data.element;
            var progress = data.result[0].match("PROGRESS\=(.*)\ TAG")[1];
            $(element).css('width', progress + '%');
            if (progress == '100') {
              $(element).css('width', '100%');
              $('#TorStatus').html('<?php echo _("<h3>You are connected to Tor</h3>"); ?>');
              $('#TorTile').addClass('connected'); 
              clearInterval(intervaltor);
              clearInterval(intervalvpn);
            }
          }
        });
      }
          
      function updateVpnStatus() {
        nakdquery('{"jsonrpc": "2.0", "method": "openvpn_state", "params": "state", "id": '+Math.floor(Math.random()*1000)+'}','#vpnprogressbar', function(data) {
          // DEBUG: $('#VpnStatus').html( JSON.stringify(data) );
          if(typeof data.result != 'undefined') {
            if(typeof data.result[0].state != 'undefined') {
              var element = data.element;
              var state = data.result[0].state;
              var progress = 0;
              var stateful = false;
              if(state == 'TCP_CONNECT') {
                var stateful = true;
                var currentTime = new Date()
                var t_start = data.result[0].timestamp;
                var t_sec = Math.round( (currentTime.getTime()/1000) - t_start );
                var estimated_sec = 30;
                if (t_sec > estimated_sec) {
                  progress = 75;
                } else {
                  progress = Math.round( (75 / estimated_sec) * t_sec );
                }
              }
              if(state == 'AUTH') {
                var stateful = true;
                progress = 85;
              }
              if(state == 'GET_CONFIG') {
                var stateful = true;
                progress = 90;
              }
              if(state == 'CONNECTED') {
                var stateful = true;
                progress = 100;
              }
              if(stateful) {
                $(element).css('width', progress + '%');
                if (progress == '100') {
                  $(element).css('width', '100%');
                  $('#VpnStatus').html('<?php echo _("<h3>You are connected to a VPN</h3>"); ?>');
                  $('#VpnTile').addClass('connected'); 
                  clearInterval(intervalvpn);
                  clearInterval(intervaltor);
                }
              }
            }
          }
        });
      }

      //
      //	events attached to clickable elements
      //

      function attacheventtor() {
        $('.toggle-tor').click(function(event) {
          $('#module-vpn .tile a').removeClass('btn-primary').addClass('btn-disabled');
          $('#module-tor .tile a').removeClass('btn-primary').addClass('btn-disabled');
          $('.progress').hide();
          spinner('#module-tor .tile p',24);
          $.ajax({
            type: "GET",
            url: "/admin/toggle_tor",
            success: function(data) {
              if (data == 'SUCCESS') {
                intervaltor = setInterval( function() {
                  nakdquery('{"jsonrpc":"2.0", "id":1, "method":"stage_current"}',false, function(data) {
                    if(typeof data.result!='undefined') {
                      var toggledone = 0;
                      if(document.getElementById('TorTile')!=null) {
                        if(data.result.name!='tor') { toggledone = 1; }
                      } else {
                        if(data.result.name=='tor') { toggledone = 1; }
                      }
                      if(toggledone) {
                        clearInterval(intervaltor);
                        updateTiles();
                      }
                    }
                  });
                }, 3000);
              } else {
                pushNotification(['Something went wrong toggling the TOR connection. Are you connected to the Internet?','warning','Close']);
                updateTiles();
              }
            }
          });
          event.preventDefault();
        });
      }
      attacheventtor();

      function attacheventvpn() {
        $('.toggle-vpn').click(function(event) {
          // get selected radio button first
          var radios = document.getElementsByClassName('vpn-list-radiobtn');
          var value;
          for (var i = 0; i < radios.length; i++) {
            if (radios[i].type === 'radio' && radios[i].checked) {
              value = radios[i].value; // get value
            }
          }
          // reflect UI changes
          $('#module-vpn .tile a').removeClass('btn-primary').addClass('btn-disabled');
          $('#module-tor .tile a').removeClass('btn-primary').addClass('btn-disabled');
          $('.progress').hide();
          $('#module-vpn .tile .wrapper').html('<p id="placeholder"></p>');
          spinner('#module-vpn .tile .wrapper #placeholder',24);

          var postdata = {};
          if (typeof value!='undefined') {
            postdata = {"file":value};
            // DEBUG: console.log('FILE: '+value);
          }

          $.ajax({
            type: "POST",
            url: "/admin/toggle_vpn",
            data: postdata,
            success: function(data) {
              if (data == 'SUCCESS') {
                // DEBUG: console.log('SUCCESS');
                intervalvpn = setInterval( function() {
                  // {"jsonrpc":"2.0","id":1,"result":{"name":"offline","desc":"","required_connectivity":"CONNECTIVITY_NONE"},"element":""}
                  nakdquery('{"jsonrpc":"2.0", "id":1, "method":"stage_current"}',false, function(data) {
                    if(typeof data.result!='undefined') {
                      var toggledone = 0;
                      if(document.getElementById('VpnTile')!=null) {
                        if(data.result.name!='vpn') { toggledone = 1; }
                      } else {
                        if(data.result.name=='vpn') { toggledone = 1; }
                      }
                      if(toggledone) {
                        clearInterval(intervalvpn);
                        updateTiles();
                      }
                    }
                  });
                }, 3000);
              } else {
                pushNotification(['Something seems to have gone wrong toggling the VPN connection.','warning','Close']);
                setTimeout( function() {              
                  updateTiles();
                }, 5000);
              }
            }
          });
          event.preventDefault();
        });

        $('.upload-vpn').click(function(event) {
          var file = document.getElementById('vpnfile').files[0];
          var size = file.size;
          if (size > 20000) {
            pushNotification(['Sorry, your file is too big. Are you sure it is a valid .ovpn file?','warning','Close']);
            //alert('<?php echo _("Sorry, your file is too big. Are you sure it is a valid .ovpn file?"); ?>');
            return;
          }
          document.getElementById('add-vpn').submit();
        });

        $('.delete-vpn').click(function(event) {
          var file = document.getElementById('myVPN').innerHTML;
          $.ajax({
            type: "POST",
            url: "/admin/delete_vpn",
            data: {
              'file': file
            },
            success: function(data) {
              window.location.href = '/admin/index';
            },
          });
        });

        $('#vpnConnectBtn').click(function(event) {
          var file = $("#vpnform input[type='radio']:checked").val();

          if (typeof(file) == 'undefined') {
            event.preventDefault();
            return false;
          }
        });
      }
      attacheventvpn();

      $('#wifi-refresh').click(function(event) {
        if(!$('#wifi-refresh').hasClass('btn-disabled')) {
          $('#wifi-refresh').toggleClass('btn-disabled btn-primary');
          $('#wan-submit').toggleClass('btn-disabled btn-primary');
          updateWifi();
          setTimeout(function() {
            $('#wifi-refresh').toggleClass('btn-primary btn-disabled');
            $('#wan-submit').toggleClass('btn-primary btn-disabled');
          },8000);
        }
      });

      $('#wan-form').submit(function(event) {
        event.preventDefault()
        if(!$('#wifi-refresh').hasClass('btn-disabled')) {        
          $('#wifiModal').modal('hide');
          pauseMainInterval = '/admin/wan';
          spinner('#wan-connection');
          $.ajax({
            type: 'POST',
            url: '/admin/wan',
            data: $('form#wan-form').serialize(),
            success: function(data) {
              if (data == 'SUCCESS') {
                setTimeout(function(){ pauseMainInterval = ''; },25000);
                // temporary way to fill WLAN connecting, until nakd supports it
                setTimeout(function() {
                  var radios = document.getElementsByClassName('wifi-list-radiobtn');
                  var value;
                  for (var i = 0; i < radios.length; i++) {
                    if (radios[i].type === 'radio' && radios[i].checked) {
                      value = radios[i].value; // get value
                    }
                  }
                  $('#wan-connection').css('color','grey');
                  $('#wan-connection').html(value+' <i>('+content.connecting+')</i>');
                },3000);
              }
            },
          });
        }
      });

      $(document).on("click", ".open-deleteVPN", function() {
          var myVPNid = $(this).data('id');
          $("#myVPN").html(myVPNid);
          $("#myVPNFile").val(myVPNid);
      });

      $('#nroutingswitch').on('switchChange.bootstrapSwitch', function(event, state) {
        pauseMainInterval = 'routing_status';
        setTimeout(function(){ pauseMainInterval = ''; },12000);
        /* NOT YET POSSIBLE DUE TO AUTH ISSUES:
          if (state == 1) {
              console.log('Insecure routing disabled (switch on).');
              nakdquery('{"jsonrpc":"2.0", "id":1, "method":"stage_set", "params":"online"}',false,false);
          } else {
              console.log('Insecure routing enabled (switch off).');
              nakdquery('{"jsonrpc":"2.0", "id":1, "method":"stage_set", "params":"offline"}',false,false);
          };
        */
        if (state == 1) {
            console.log('Insecure routing disabled (switch on).');
            $sdata = 'off';
        } else {
            console.log('Insecure routing enabled (switch off).');
            $sdata = 'on';
        };
        $.ajax({
          type: "POST",
          url: "/admin/toggle_routing",
          data: {
              mode: $sdata
          },
          success: function(data) {
            if (data == 'SUCCESS') {
              $('#nroutingswitch').bootstrapSwitch('state', state );
            }
          }
        });
      });
    });
</script>
